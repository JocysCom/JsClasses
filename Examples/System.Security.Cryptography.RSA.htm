<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
	<meta http-equiv="Pragma" content="no-cache" />
	<meta http-equiv="Expires" content="-1" />
	<title>System.Security.Cryptography.RSA</title>
	<link type="text/css" rel="stylesheet" href="Styles/Default.css" />
	<link type="text/css" rel="stylesheet" href="../System.Web.UI.Interface.debug.css" />
	<script type="text/javascript" src="../System.debug.js"></script>
	<script type="text/javascript" src="../System.IO.debug.js"></script>
	<script type="text/javascript" src="../System.Text.debug.js"></script>
	<script type="text/javascript" src="../System.Convert.debug.js"></script>
	<script type="text/javascript" src="../System.BitConverter.debug.js"></script>
	<script type="text/javascript" src="../System.IO.BinaryReader.debug.js"></script>
	<script type="text/javascript" src="../System.BigInt.debug.js"></script>
	<script type="text/javascript" src="../System.Security.Cryptography.SHA1.debug.js"></script>
	<script type="text/javascript" src="../System.Security.Cryptography.debug.js"></script>
	<script type="text/javascript" src="../System.Security.Cryptography.RSA.debug.js"></script>
	<script type="text/javascript">

		//#region Log Function

		function WriteLog(text) {
			Trace.Write("<code>" + text + "</code>");
		}

		function WriteEnc(input, output) {
			WriteLog("Transform: " + System.BitConverter.ToString(input, '') +
				" -> " + System.BitConverter.ToString(output, ''));
		}

		//#endregion

		function Window_Load() {
			Trace.IsEnabled = true;
			WriteLog("Start Demo");
			$("EncryptButton").onclick = EncryptButton_Click;
			$("DecryptButton").onclick = DecryptButton_Click;
			$("SignButton").onclick = SignButton_Click;
			$("VerifyButton").onclick = VerifyButton_Click;
			$("TestButton").onclick = TestButton_Click;
			$("NewKeyButton").onclick = NewKeyButton_Click;
			$("NewKeyApiButton").onclick = NewKeyApiButton_Click;
			$("ConvertToBasePrivateKeyButton").onclick = ConvertToBasePrivateKeyButton_Click;
			$("ConvertToBasePublicKeyButton").onclick = ConvertToBasePublicKeyButton_Click;
			$("KeyTextBox").value = xmlParamsDefault;
		}

		window.onload = Window_Load;

		// RSA 512 bit key.
		var xmlParamsDefault =
			"<RSAKeyValue>" +
			"<Modulus>pxtmFnrGI6Sb8ziyY+NRUDuQ4b/ETw5WabQ4daFQqzsCEr/6J/LLBU/2D5mO5/Wu5U/Rya1E55aYFZeaZMNqAw==</Modulus>" +
			"<Exponent>AQAB</Exponent>" +
			"<P>2TsVXWPEvDIJv/gd2rX9k0UOyXuaYgoAchIH6vUicis=</P>" +
			"<Q>xO4+OYREQfqYRQK7y73+RaUG0IxobT0OQ0c+Ok2hc4k=</Q>" +
			"<DP>K7/xgpiIU9rECeyfnp/OjS14V+3T3vDivBaTj6eFI3c=</DP>" +
			"<DQ>K4N9ClZ4gp+tn6oP9t//XEIvtEsiE+kmyqTmUhmvMAk=</DQ>" +
			"<InverseQ>p7o4BOlKZQZ693R1ViZ66y5gTjUkNNTd2za7/1YGBCs=</InverseQ>" +
			"<D>XZqFVrYy4qhECruJgVZFp/GVuD5Y0gev88nVjl5r911QT+I8vgJSklTso7jTlpMtf2oe7UZ0WRWEtgPS3tZn4Q==</D>" +
			"</RSAKeyValue>";

		function GetNewRsaProvider(dwKeySize) {
			// Create a new instance of RSACryptoServiceProvider.
			if (!dwKeySize) dwKeySize = 512;
			return new System.Security.Cryptography.RSACryptoServiceProvider(dwKeySize);
		}

		function NewKeyButton_Click(sender, e) {
			var keySize = Number($("KeySizeDropDownList").value);
			var rsa = GetNewRsaProvider(keySize);
			$("KeyTextBox").value = rsa.ToXmlString(true);
		}

		function GetRsaKey(includePrivateParameters) {
			var keyParams = $("KeyTextBox").value;
			// ------------------------------------------------
			// RSA Keys
			// ------------------------------------------------
			var rsa = GetNewRsaProvider();
			if (keyParams[0] === "<") {
				// Import parameters from xml.
				rsa.FromXmlString(keyParams);
			} else {
				var keyBlob = System.Convert.FromBase64String(keyParams);
				rsa.ImportCspBlob(keyBlob);
			}
			// Export RSA key to RSAParameters and include:
			//    false - Only public key required for encryption.
			//    true  - Private key required for decryption.
			return rsa.ExportParameters(includePrivateParameters);
		}

		function EncryptButton_Click(sender, e) {
			$("EncryptedTextBox").value = "";
			var decryptedBytes = System.Text.Encoding.UTF8.GetBytes($("DataTextBox").value);
			var doOaepPadding = $("PaddingDropDownList").options[$("PaddingDropDownList").selectedIndex].value === "OAEP";
			// ------------------------------------------------
			// Encrypt
			// ------------------------------------------------
			var rsa = GetNewRsaProvider();
			// Import the RSA Key information.
			rsa.ImportParameters(GetRsaKey(false));
			// Encrypt the passed byte array and specify OAEP padding.
			var encryptedBytes = rsa.Encrypt(decryptedBytes, doOaepPadding);
			var encryptedString = System.Convert.ToBase64String(encryptedBytes)
			// ------------------------------------------------
			// Display the encrypted data.
			//var encryptedString = System.BitConverter.ToString(encryptedBytes, "");
			$("EncryptedTextBox").value = encryptedString;
		}

		function DecryptButton_Click(sender, e) {
			$("DecryptedTextBox").value = "";
			//var encryptedBytes = System.Convert.HexStringToBytes($("EncryptedTextBox").value);
			var encryptedBytes = System.Convert.FromBase64String($("EncryptedTextBox").value);
			var doOaepPadding = $("PaddingDropDownList").options[$("PaddingDropDownList").selectedIndex].value === "OAEP";
			// ------------------------------------------------
			// Decrypt
			// ------------------------------------------------
			var rsa = GetNewRsaProvider();
			// Import the RSA Key information.
			rsa.ImportParameters(GetRsaKey(true));
			// Decrypt the passed byte array and specify OAEP padding.
			var decryptedBytes = rsa.Decrypt(encryptedBytes, doOaepPadding);
			// ------------------------------------------------
			// Display the decrypted data.
			var decryptedString = System.Text.Encoding.UTF8.GetString(decryptedBytes);
			$("DecryptedTextBox").value = decryptedString;
		}

		function SignButton_Click(sender, e) {
			$("EncryptedTextBox").value = "";
			var decryptedBytes = System.Text.Encoding.UTF8.GetBytes($("DataTextBox").value);
			var doOaepPadding = $("PaddingDropDownList").options[$("PaddingDropDownList").selectedIndex].value === "OAEP";
			// ------------------------------------------------
			// Sign
			// ------------------------------------------------
			var rsa = GetNewRsaProvider();
			// Import the RSA Key information (include private key).
			rsa.ImportParameters(GetRsaKey(true));
			// Sign data.
			var signatureBytes = rsa.SignData(decryptedBytes, "SHA1", doOaepPadding);
			// Encode bytes for display.
			var encodedSignature = System.Convert.ToBase64String(signatureBytes);
			// ------------------------------------------------
			// Display signature.
			$("EncryptedTextBox").value = encodedSignature;
		}

		function VerifyButton_Click(sender, e) {
			$("DecryptedTextBox").value = "";
			var decryptedBytes = System.Text.Encoding.UTF8.GetBytes($("DataTextBox").value);
			var signatureBytes = System.Convert.FromBase64String($("EncryptedTextBox").value);
			var doOaepPadding = $("PaddingDropDownList").options[$("PaddingDropDownList").selectedIndex].value === "OAEP";
			// ------------------------------------------------
			// Verify
			// ------------------------------------------------
			var rsa = GetNewRsaProvider();
			// Import the RSA Key information (exclude private key).
			rsa.ImportParameters(GetRsaKey(false));
			// Verify the hash.
			var success = rsa.VerifyData(decryptedBytes, "SHA1", signatureBytes, doOaepPadding);
			// ------------------------------------------------
			// Display results.
			$("DecryptedTextBox").value = success
				? "Digital Signature: Valid"
				: "Digital Signature: Failed";
		}

		var maxTests = 0;

		function TestButton_Click(sender, e) {
			maxTests = 1000;
			setTimeout(DoWork, 10);
		}

		function DoWork(sender, e) {
			var text = $("DataTextBox").value;
			var decryptedBytes = System.Text.Encoding.UTF8.GetBytes(text);
			var doOaepPadding = $("PaddingDropDownList").options[$("PaddingDropDownList").selectedIndex].value === "OAEP";
			var rsa = GetNewRsaProvider();
			rsa.ImportParameters(GetRsaKey(true));
			var encryptedBytes = rsa.Encrypt(decryptedBytes, doOaepPadding);
			var decryptedString = "";
			try {
				// Decrypt the passed byte array and specify OAEP padding.
				decryptedBytes = rsa.Decrypt(encryptedBytes, doOaepPadding);
				decryptedString = System.Text.Encoding.UTF8.GetString(decryptedBytes);
			} catch (ex) {
				WriteLog(encryptedBytes);
			}
			maxTests--;
			var success = (text === decryptedString);
			WriteLog(maxTests + ". bytes: " + encryptedBytes.length + " " + success);
			if (maxTests > 0 && success) setTimeout(DoWork, 10);
		}

		//#region Web Cryptography API

		// http://www.w3.org/TR/WebCryptoAPI/

		function NewKeyApiButton_Click(sender, e) {
			var keySize = Number($("KeySizeDropDownList").value);
			var index = $("PaddingDropDownList").selectedIndex;
			var padding = $("PaddingDropDownList").options[index].value;
			System.Security.Cryptography.RSA.CreateKeyCompleted = RSA_CreateKeyCompleted;
			System.Security.Cryptography.RSA.CreateKeyAsync(keySize);
		}

		function ConvertToBasePrivateKeyButton_Click(sender, e) {
			ConvertKeyToBase64(true);
		}

		function ConvertToBasePublicKeyButton_Click(sender, e) {
			ConvertKeyToBase64(false);
		}

		function ConvertKeyToBase64(includePrivateKey) {
			var keyParams = $("KeyTextBox").value;
			// ------------------------------------------------
			// RSA Keys
			// ------------------------------------------------
			var rsa = GetNewRsaProvider();
			if (keyParams[0] === "<") {
				// Import parameters from XML.
				rsa.FromXmlString(keyParams);
			} else {
				// Import parameters from BLOB.
				var keyBlob = System.Convert.FromBase64String(keyParams);
				rsa.ImportCspBlob(keyBlob);
			}
			// Export RSA key to RSAParameters and include:
			//    false - Only public key required for encryption.
			//    true  - Private key required for decryption.
			var bytes = rsa.ExportCspBlob(includePrivateKey);
			var base64 = System.Convert.ToBase64String(bytes);
			$("Base64KeyTextBox").value = base64;
		}

		function RSA_CreateKeyCompleted(sender, e) {
			if (e.Error === null) {
				Trace.Write("Key pair generation was successful.");
				var rsa = new System.Security.Cryptography.RSACryptoServiceProvider();
				//rsa.ImportParameters(e.PublicKey);
				//var publicKeyXml = rsa.ToXmlString(false);
				rsa.ImportParameters(e.PrivateKey);
				var privateKeyXml = rsa.ToXmlString(true);
				$("KeyTextBox").value = privateKeyXml;
			} else {
				Trace.Write(e.Error);
			}
		}

			//#endregion

	</script>
	<style type="text/css">
		.style1 {
			color: #808080;
		}
	</style>
</head>
<body>
	<table border="0" cellpadding="0" cellspacing="4">
		<tbody>
			<tr>
				<td style="white-space:nowrap;">RSA Key Size:</td>
				<td colspan="2">
					<select id="KeySizeDropDownList">
						<option selected="selected" value="512">512-bit</option>
						<option value="768">768-bit</option>
						<option value="1024">1024-bit</option>
						<option value="2048">2048-bit</option>
						<option value="4096">4096-bit</option>
					</select>
				</td>
				<td style="width: 100%;"></td>
			</tr>
			<tr>
				<td>&nbsp;</td>
				<td class="style1">
					Use pure JavaScript to generate weak C# compatible RSA keys (up to 1024-bit).<br />IMPORTANT: Web browser will freeze during generation of keys larger than 1024-bit.</td>
				<td class="style1">Use Web Cryptography API, to generate secure and C# compatible RSA keys (up to 4096-bit).<br />IMPORTANT: In Google Chrome, Web Cryptography API is disabled under HTTP protocol and works under secure HTTPS only.</td>
				<td>&nbsp;</td>
			</tr>
			<tr>
				<td></td>
				<td>
					<input id="NewKeyButton" value="↓ - Generate New Key (Slow)" type="button" /></td>
				<td class="style1">
					<input id="NewKeyApiButton" value="↓ - Generate New Key (Fast)" type="button" /></td>
				<td>Export Key:</td>
			</tr>
			<tr>
				<td>RSA Key:</td>
				<td colspan="2">
					<textarea id="KeyTextBox" style="width: 600px; font-family: Consolas; font-size: 8pt;" cols="128" rows="11" name="S2"></textarea></td>
				<td>
					<input id="ConvertToBasePrivateKeyButton" value="↓ - Private Key to Base64" type="button" />
					<input id="ConvertToBasePublicKeyButton" value="↓ - Public Key to Base64" type="button" /><br /><textarea id="Base64KeyTextBox" style="font-family: Consolas; font-size: 8pt;" cols="77" rows="9" name="S1" readonly="readonly"></textarea></td>
			</tr>
			<tr>
				<td>Padding:</td>
				<td colspan="2">
					<select id="PaddingDropDownList">
						<option selected="selected" value="OAEP">OAEP padding (PKCS#1 v2)</option>
						<option value="PKCS">Direct Encryption (PKCS#1 v1.5)</option>
					</select>
				</td>
			</tr>
			<tr>
				<td>
					Data:
				</td>
				<td colspan="2">
					<input value="abcdef_01234" id="DataTextBox" style="width: 600px;"
						   type="text" />
				</td>
				<td></td>
			</tr>
			<tr>
				<td></td>
				<td colspan="2">
					<input value="↓ - Encrypt" id="EncryptButton" type="button" />
                    <input value="↓ - Sign" id="SignButton" type="button" />
				</td>
				<td></td>
			</tr>
			<tr>
				<td>
					Encrypted:
				</td>
				<td colspan="2">
					<textarea id="EncryptedTextBox" style="width: 600px;" cols="128"
							  rows="3"></textarea>
				</td>
			</tr>
			<tr>
				<td></td>
				<td colspan="2">
					<input value="↓ - Decrypt" id="DecryptButton" type="button" />
                    <input value="↓ - Verify" id="VerifyButton" type="button" />
					<input value="Test" id="TestButton" type="button" style="display: none" />
				</td>
				<td></td>
			</tr>

			<tr>
				<td>
					Decrypted:
				</td>
				<td colspan="2">
					<textarea name="DecryptedTextBox" id="DecryptedTextBox" style="width: 600px;" cols="128"
							  rows="3"></textarea>
				</td>
				<td></td>
			</tr>
		</tbody>
	</table>
	<br />
	<div id="TraceLog" style="width: 100%; height: 200px;"></div>
</body>
</html>
