<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
	<meta http-equiv="Pragma" content="no-cache" />
	<meta http-equiv="Expires" content="-1" />
	<title>System.Drawing.Colors</title>
	<link rel="stylesheet" type="text/css" href="../System.Web.UI.Interface.debug.css" />
	<link rel="stylesheet" type="text/css" href="Styles/Default.css" />
</head>
<body>
	<div>
		<canvas id="picker" width="150" height="150"></canvas>
		<br />
		<br />
		<input id="range" type="range" min="0" max="255" value="255" step="1" />
	</div>
	<style>
		.divBlock {
			float: left;
			margin: 8px;
		}

		.div {
			padding: 8px;
		}

		#picker {
			background: black
		}

		body {
			font-family: Consolas;
			font-size: small;
		}
	</style>
	<script type="text/javascript">

		var canvas = document.getElementById("picker");
		var context = canvas.getContext("2d");
		var rangeEl = document.getElementById('range');
		var colorWheel = null;

		// update the alpha bytes of the color wheel
		function updatePicker() {
			var bitmap = context.getImageData(0, 0, 150, 150);
			for (var y = 0; y < 150; y++) {
				for (var x = 0; x < 150; x++) {
					var offset = ((y * 150) + x) * 4 + 3;
					colorWheel.data[offset] = rangeEl.value | 0;
				}
			}

			// update the canvas
			context.putImageData(colorWheel, 0, 0);
		}

		// setup
		drawPicker();
		rangeEl.addEventListener("change", updatePicker);

		// =========

		function hsv2rgb(h, s, v) {
			var c = v * s;
			var h1 = h / 60;
			var x = c * (1 - Math.abs((h1 % 2) - 1));
			var m = v - c;
			var rgb;

			if (typeof h == 'undefined') rgb = [0, 0, 0];
			else if (h1 < 1) rgb = [c, x, 0];
			else if (h1 < 2) rgb = [x, c, 0];
			else if (h1 < 3) rgb = [0, c, x];
			else if (h1 < 4) rgb = [0, x, c];
			else if (h1 < 5) rgb = [x, 0, c];
			else if (h1 <= 6) rgb = [c, 0, x];

			var r = 255 * (rgb[0] + m);
			var g = 255 * (rgb[1] + m);
			var b = 255 * (rgb[2] + m);

			return [r, g, b];
		}

		function rgb2hsv(r, g, b) {
			let rabs, gabs, babs, rr, gg, bb, h, s, v, diff, diffc, percentRoundFn;
			rabs = r / 255;
			gabs = g / 255;
			babs = b / 255;
			v = Math.max(rabs, gabs, babs),
				diff = v - Math.min(rabs, gabs, babs);
			diffc = c => (v - c) / 6 / diff + 1 / 2;
			percentRoundFn = num => Math.round(num * 100) / 100;
			if (diff == 0) {
				h = s = 0;
			} else {
				s = diff / v;
				rr = diffc(rabs);
				gg = diffc(gabs);
				bb = diffc(babs);

				if (rabs === v) {
					h = bb - gg;
				} else if (gabs === v) {
					h = (1 / 3) + rr - bb;
				} else if (babs === v) {
					h = (2 / 3) + gg - rr;
				}
				if (h < 0) {
					h += 1;
				} else if (h > 1) {
					h -= 1;
				}
			}
			return {
				h: Math.round(h * 360),
				s: percentRoundFn(s * 100),
				v: percentRoundFn(v * 100)
			};
		}

		function Grayscale(r, g, b) {
			return .299 * r + .587 * g + .114 * b;
			//return (r + g + b) / 3;
		}

		function Brightness(p, level) {
			var b = [];
			b[0] = p[0];
			b[1] = p[1];
			b[2] = p[2];
			if (level < -255 || level > 255)
				return null;
			for (var i = 0; i < 4; i++) {
				var v = b[i] + level;
				if (v < 0) v = 0;
				if (v > 255) v = 255;
				b[i] = v;
			}
			return b;
		}

		// Make yellow more brighter (more yellow) and blue darker (more blue).
		function AdjustBrightness(c, level)
		{
			// adjust brightness on yellow.
			var hsv = rgb2hsv(c[0], c[1], c[2]);
			// Shift by 60 degrees so 60 will be 0.
			var sh = (hsv.h + 360 - 60) % 360;
			// Darken blue less.
			if (hsv.h > 180)
				level = level / 2;
			var h = sh / 360 * Math.PI * 1.0;
			// 60° = 0, 240° = 1
			var b = level - Math.round(Math.sin(h) * level * 2);
			c = Brightness(c, b);
			return c;
		}

		// create the initial color wheel
		function drawPicker() {
			colorWheel = context.getImageData(0, 0, 150, 150);
			for (var y = 0; y < 150; y++) {
				for (var x = 0; x < 150; x++) {
					var offset = 4 * ((y * 150) + x);
					var hue = 180 + Math.atan2(y - 75, x - 75) * (180 / Math.PI);
					var saturation = Math.sqrt(Math.pow(y - 75, 2) + Math.pow(x - 75, 2)) / 75;
					saturation = Math.min(1, saturation);
					var hsv = hsv2rgb(hue, saturation, 1); // fixed value
					colorWheel.data[offset + 0] = hsv[0];
					colorWheel.data[offset + 1] = hsv[1];
					colorWheel.data[offset + 2] = hsv[2];
					colorWheel.data[offset + 3] = 255;
				}
			}
			context.putImageData(colorWheel, 0, 0);
		}
	</script>
	<script type="text/javascript">

		function toHex(d) {
			return ("0" + (Math.round(Number(d)).toString(16))).slice(-2).toUpperCase()
		}

		function CreateBlock() {
			var divBlock = document.createElement("div");
			divBlock.className = "divBlock";
			document.body.appendChild(divBlock);
			return divBlock;
		}

		function CreateLevelDiv(divBlock, color, level) {
			var div = document.createElement("div");
			div.className = "div";
			div.innerText = ".SWUI_Level_" + level + " { background-color: " + color + "; }";
			div.style.setProperty("background-color", color);
			divBlock.appendChild(div);
		}

		function CreateLevels() {
			var divBlock = CreateBlock();
			var max = 9;
			for (var i = 0; i <= max; i++) {
				// Rotate by ~13 degrees from red (0°) to green (120°).
				var h = (120 / max) * i;
				var c = hsv2rgb(h, 0.5, 1);
				c = AdjustBrightness(c, 10);
				var color = "#" + toHex(c[0]) + toHex(c[1]) + toHex(c[2]);
				CreateLevelDiv(divBlock, color, max - i + 1);
			}
			CreateLevelDiv(divBlock, "#FFFFFF", 0);
		}

		CreateLevels();

	</script>

	<script type="text/javascript">

		function CreateDegreeDiv(divBlock, color, comment) {
			var r = parseInt(color.substr(1, 2), 16);
			var g = parseInt(color.substr(3, 2), 16);
			var b = parseInt(color.substr(5, 2), 16);
			var c = rgb2hsv(r, g, b);
			var h = Math.round(c.h).toString().padStart(3, '0');
			var s = Math.round(c.s).toString().padStart(3, '0');
			var v = Math.round(c.v).toString().padStart(3, '0');
			var hsv = "(" + h + ", " + s + ", " + v + ")";
			var degree = c.h.toString().padStart(3, '0');
			var g = Grayscale(r, g, b);
			var gray = "#" + toHex(g) + toHex(g) + toHex(g);
			var divContent = document.createElement("div");
			divBlock.appendChild(divContent);
			// Create control.
			var div = document.createElement("div");
			div.className = "div";
			if (!comment)
				comment = "";
			div.innerText = ".SWUI_Degree_" + degree + " " + color + " " + hsv + comment;
			div.style.setProperty("background-color", color);
			div.style.setProperty("float", "left");
			divContent.appendChild(div);

			// Create control.
			var grayDiv = document.createElement("div");
			grayDiv.className = "div";
			grayDiv.innerHTML = "&nbsp;";
			grayDiv.style.setProperty("background-color", gray);
			grayDiv.style.setProperty("float", "right");
			divContent.appendChild(grayDiv);

		}

		function CreateDegreeBlock(s, v, a, brighten, darken) {
			var divBlock = CreateBlock();

			var rgbs = [];

			var grays = 0;
			var i = 0;
			// Rotate by 15 degrees from red (0°) to red (<360°).
			for (var h = 0; h < 360; h += 30) {
				var c = hsv2rgb(h, s, v);
				rgbs.push(c);
				grays += Grayscale(c[0], c[1], c[2]);
				i++;
			}
			var averageGray = grays / i;

			//alert("0 - " + Math.cos(0));
			//alert("PI/2 - " + Math.cos(Math.PI / 2));


			// Create divs from colours.
			for (var i = 0; i < rgbs.length; i++) {
				var c = rgbs[i];
				if (brighten) {
					for (var b = 1; b <= 255; b++) {
						// Increase brightness.
						var c2 = Brightness(c, b);
						// Get new gray colour.
						var gray = Grayscale(c2[0], c2[1], c2[2]);
						// if new gray colour is too bright then break.
						if (gray > averageGray)
							break;
						// Set new colour.
						c = c2;
					}
				}
				if (darken) {
					for (var b = 1; b <= 255; b++) {
						// dencrease brightness.
						var c2 = Brightness(c, -b);
						// Get new gray colour.
						var gray = Grayscale(c2[0], c2[1], c2[2]);
						// if new gray colour is too bright then break.
						if (gray < averageGray)
							break;
						// Set new colour.
						c = c2;
					}
				}
				c = AdjustBrightness(c, a);

				var color = "#" + toHex(c[0]) + toHex(c[1]) + toHex(c[2]);
				CreateDegreeDiv(divBlock, color);
			}
		}

		function CreateDegreees() {
			CreateDegreeBlock(1.0, 1.0, 0);
			CreateDegreeBlock(0.80, 0.80, 0x40, true, false);
			CreateDegreeBlock(0.5, 1.0, 0x00, false, false);
			//var divBlock = CreateBlock();
			//CreateDegreeDiv(divBlock, "#B9231F");
			//CreateDegreeDiv(divBlock, "#E05D1A");
			//CreateDegreeDiv(divBlock, "#E8C917");
			//CreateDegreeDiv(divBlock, "#4F8D23");
			//CreateDegreeDiv(divBlock, "#2C5499");
			//CreateDegreeDiv(divBlock, "#372780");
			//var divBlock = CreateBlock();
			//CreateDegreeDiv(divBlock, "#FF768F");
			//CreateDegreeDiv(divBlock, "#FFAD6F");
			//CreateDegreeDiv(divBlock, "#FEFF7F");
			//CreateDegreeDiv(divBlock, "#7BFF77");
			//CreateDegreeDiv(divBlock, "#7EB9FF");
			//CreateDegreeDiv(divBlock, "#C486FF");
		}

		CreateDegreees();

		function CopyToClipboard(element) {
			var input = document.createElement("input");
			input.value = element.innerText;
			document.body.appendChild(input);
			document.execCommand("copy");
			document.body.removeChild(input);
		}

	</script>

</body>
</html>
